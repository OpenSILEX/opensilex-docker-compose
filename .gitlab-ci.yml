# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:
  - build
  - test
  - scan
  - pages
  - integration

integration-job:
  stage: integration
  script:
    - git fetch origin pull/${CI_MERGE_REQUEST_IID}/head:pr-${CI_MERGE_REQUEST_IID}
    - git checkout pr-${CI_MERGE_REQUEST_IID} 
    - echo "Exécution des tests..." 
  rules:
    - if: $GITHUB_ACCESS == "$GITHUB_ACCESS_VALUE"

include:
  - template: Jobs/Container-Scanning.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml
container_scanning:
  stage: test 
  variables:
    CS_IMAGE: $DOCKER_REGISTRY/opensilex/opensilex-docker-compose:latest
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
    

# create an docker image 
build:image: 
  image: docker:26.0.2-dind
  stage: build
  services:
    - docker:dind
  before_script:
    - export IMAGE_TAG=${IMAGE_TAG:latest} 
    - apk add --no-cache docker-compose
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script: 
    - if [ -z "$IMAGE_TAG" ]; then echo "Missing IMAGE_TAG variable latest tag will be used"; IMAGE_TAG=latest ; fi 
    - docker info
    - ls
    - docker compose --env-file opensilex.env build --build-arg UID=999 --build-arg GID=999 opensilex
    - docker tag docker.io/library/opensilex-stack-opensilex $DOCKER_REGISTRY/opensilex/opensilex-docker-compose:$IMAGE_TAG
    - docker push $DOCKER_REGISTRY/opensilex/opensilex-docker-compose:$IMAGE_TAG
  when: manual

# trivy:
#   stage: test
#   image: docker:26.0.2-dind
#   services:
#     - docker:dind
#   variables:
#     # XDG_DATA_HOME: ${CI_PROJECT_DIR}
#     IMAGE: $DOCKER_REGISTRY/opensilex/opensilex-docker-compose:$IMAGE_TAG
#   before_script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
#     - echo $TRIVY_VERSION
#     - cd ${CI_PROJECT_DIR}
#     - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
#     - export PATH="${CI_PROJECT_DIR}/trivy:${CI_PROJECT_DIR}/.trivy/plugins/scan2html/scan2html:$PATH" 
#   allow_failure: true
#   script:
#     - if [ -z "$IMAGE_TAG" ]; then echo "Missing IMAGE_TAG variable latest tag will be used"; IMAGE_TAG=latest ; fi 
#     - docker image pull  $DOCKER_REGISTRY/opensilex/opensilex-docker-compose:$IMAGE_TAG
#     - mkdir -p ${CI_PROJECT_DIR}/public && mkdir -p ${CI_PROJECT_DIR}/.trivy/plugins
#     # Build image
#     # - wget https://github.com/fatihtokus/scan2html/releases/download/v0.2.6/scan2html.tar.gz
#     - ${CI_PROJECT_DIR}/trivy plugin -d install github.com/fatihtokus/scan2html
#     - ${CI_PROJECT_DIR}/trivy -d  plugin list
#     - cd ${CI_PROJECT_DIR}/public
#     - echo $PATH
#     - ls ${CI_PROJECT_DIR}/.trivy/plugins/scan2html
#     - ${CI_PROJECT_DIR}/trivy -d  scan2html image $IMAGE "index.html"
#     # Build report
#     - ${CI_PROJECT_DIR}/trivy --exit-code 0 --cache-dir .trivycache/ --no-progress --format template --template "@contrib/gitlab.tpl" -o gl-container-scanning-report.json $IMAGE
#     # Print report
#     - ${CI_PROJECT_DIR}/trivy --exit-code 0 --cache-dir .trivycache/ --no-progress --severity HIGH $IMAGE
#     # Fail on severe vulnerabilities
#     - ${CI_PROJECT_DIR}/trivy --exit-code 1 --cache-dir .trivycache/ --severity CRITICAL --no-progress $IMAGE
#   cache:
#     paths:
#       - .trivycache/
#   # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold)
#   artifacts:
#     reports:
#       container_scanning: gl-container-scanning-report.js

trivy_html:
  stage: test
  image: docker:26.0.2-dind
  services:
    - docker:dind
  variables:
    # XDG_DATA_HOME: ${CI_PROJECT_DIR}
    IMAGE: $DOCKER_REGISTRY/opensilex/opensilex-docker-compose:$IMAGE_TAG
  # https://github.com/fatihtokus/scan2html/issues/32#top for alpine 
  before_script:
    - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - echo $TRIVY_VERSION
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - apk update
    - apk upgrade
    - apk add bash
    - apk add curl
    - apk --no-cache add ca-certificates git
    - curl -s -L -o - https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz | tar -xz
  allow_failure: true
  script:
    - if [ -z "$IMAGE_TAG" ]; then echo "Missing IMAGE_TAG variable latest tag will be used"; IMAGE_TAG=latest ; fi 
    - docker image pull  $DOCKER_REGISTRY/opensilex/opensilex-docker-compose:$IMAGE_TAG
    - mkdir -p ${CI_PROJECT_DIR}/public
    # Build image
    - ./trivy plugin install github.com/fatihtokus/scan2html
    - ./trivy plugin list
    - ./trivy --timeout 45m scan2html image ${IMAGE} "index.html"
    - mv index.html ${CI_PROJECT_DIR}/public
  artifacts:
    paths: 
      - public
  cache:
    paths:
      - .trivycache/
    # Build report
#    - trivy --exit-code 0 --cache-dir .trivycache/ --no-progress --format template --template "@contrib/gitlab.tpl" -o #gl-container-scanning-report.json $IMAGE
#    # Print report
#    - trivy --exit-code 0 --cache-dir .trivycache/ --no-progress --severity HIGH $IMAGE
#    # Fail on severe vulnerabilities
#    - trivy --exit-code 1 --cache-dir .trivycache/ --severity CRITICAL --no-progress $IMAGE
#  cache:
#    paths:
#      - .trivycache/
#  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab #EE Ultimate or GitLab.com Gold)
#  artifacts:
#    reports:
#      container_scanning: gl-container-scanning-report.js
# trivy_scan:
#  stage: scan
#  image: aquasec/trivy:latest
#  variables:
#     IMAGE: $DOCKER_REGISTRY/opensilex/opensilex-docker-compose:$IMAGE_TAG
#     TRIVY_CACHE_DIR: ".trivycache/"

#  before_script:
#   - apk add --update docker openrc. --no-cache
#   - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#   - trivy plugin -d install github.com/fatihtokus/scan2html
#   - docker image pull  $DOCKER_REGISTRY/opensilex/opensilex-docker-compose:$IMAGE_TAG

#  script:
#     - if [ -z "$IMAGE_TAG" ]; then echo "Missing IMAGE_TAG variable latest tag will be used"; IMAGE_TAG=latest ; fi 
#     - docker image pull  $DOCKER_REGISTRY/opensilex/opensilex-docker-compose:$IMAGE_TAG

#     # - trivy image --input my-image.tar
# #  dependencies:
# #     - build
#     - trivy image --timeout 30m -o index.html --format template --template "${CI_PROJECT_DIR}/trivy/trivy-html.tpl" $IMAGE

#  cache:
#     paths:
#       - .trivycache/ 

# pages:
#   image: docker:26.0.2-dind 
#   services:
#     - docker:dind
#   stage: pages 
#   variables:
#     IMAGE: $DOCKER_REGISTRY/opensilex/opensilex-docker-compose:$IMAGE_TAG
#     TRIVY_CACHE_DIR: ".trivycache/"
#     XDG_DATA_HOME: /usr/local/bin/trivy/plugins

#   allow_failure: true
#   before_script:
#    - export TRIVY_VERSION=${TRIVY_VERSION:-v0.50.2}
#    - apk add --no-cache curl tree
#    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin ${TRIVY_VERSION}
#    - mkdir -p $CI_PROJECT_DIR/trivy/plugins 
#    - wget https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl
#    - mv html.tpl $CI_PROJECT_DIR/trivy
#   #  - trivy plugin run github.com/fatihtokus/scan2html
#    - trivy plugin -d install github.com/fatihtokus/scan2html
#    - trivy plugin list
#    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#    - export PATH="${CI_PROJECT_DIR}/trivy:$PATH" 
#   script:
#     - if [ -z "$IMAGE_TAG" ]; then echo "Missing IMAGE_TAG variable latest tag will be used"; IMAGE_TAG=latest ; fi 
#     - mkdir $CI_PROJECT_DIR/public 
#     - tree -L 7 $CI_PROJECT_DIR/trivy/plugins 
#     - docker image pull  $DOCKER_REGISTRY/opensilex/opensilex-docker-compose:$IMAGE_TAG
#     - cd $CI_PROJECT_DIR/public 
#     - trivy image --timeout 30m -o index.html --format template --template "${CI_PROJECT_DIR}/trivy/trivy-html.tpl" $IMAGE
#      # Image report
#     # - trivy image --exit-code 0 --format template --template "@contrib/gitlab-codequality.tpl" -o gl-codeclimate-image.json $IMAGE
#     - trivy scan2html image $DOCKER_REGISTRY/opensilex/opensilex-docker-compose:$IMAGE_TAG index.html

#   cache:
#     paths:
#       - .trivycache/ 
#     # - trivy plugin run github.com/fatihtokus/scan2html $DOCKER_REGISTRY/opensilex/opensilex-docker-compose:$IMAGE_TAG $CI_PROJECT_DIR/public/index.html
#   artifacts:
#     paths:
#       - gl-codeclimate.json
#       - public 
#     reports:
#       codequality: gl-codeclimate.json
#   when: manual